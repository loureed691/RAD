name: Tests

on:
  push:
    branches: [main, develop, "copilot/**"]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  unit-integration:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-timeout pytest-cov
      
      - name: Run unit tests
        run: |
          pytest tests_unit/ -v --tb=short --timeout=5 --cov=. --cov-report=term-missing
      
      - name: Run integration tests
        run: |
          pytest tests_integration/ -v --tb=short --timeout=30

  resilience:
    name: Resilience Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-timeout
      
      - name: Run resilience tests
        run: |
          pytest tests_resilience/ -v --tb=short --timeout=120

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pylint
      
      - name: Run flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=.venv,venv,build,dist
          # Exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=15 --max-line-length=120 --statistics --exclude=.venv,venv,build,dist
        continue-on-error: true
